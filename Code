Liver.toxicity
========================================================
author: Chaimae El-Houjjaji, Kexin Li, Pauline Turk
date: 19/01/2022
autosize: true

========================================================
A Faire : 
  - Shapiro gaussien (boucle sur les 3000)
  
========================================================



```{r Importation d autres librairies utiles, echo=FALSE}
# bibliothèques et fonctions potentiellement utiles pour la suite
library(tidyverse)
library(dplyr)
library(FactoMineR) # pour ACP
library(factoextra) #pour extraire et visualiser les résultats issus de FactoMineR
library(glue)  # pour jolie print
library("corrplot") # pour les calculs de corrélations


library(knitr) #pour avoir un format table dans les sor

# regression generalisée
library(glmnet)
library(MultiVarSel)
```




Importation et chargement des données
========================================================

- Installation du package mixOmics (aide en ligne):

http://mixomics.org/install/
```{r}
# install.packages("devtools")
library(devtools)
# install_github("mixOmicsTeam/mixOmics") 
library(mixOmics)

# Loaded mixOmics 6.19.1 --> succès du chargement de mixOmics
```


- Chargement des données:
```{r}
data(liver.toxicity)
```


# Présentation des données  

## Variable explicative:

Etude de toxicité hépatique sur 64 rats exposés à des doses non toxiques (50 ou 150 mg/kg), modérément toxiques (1500 mg/kg) ou sévèrement toxiques (2000 mg/kg) d'acétaminophène (paracétamol). Des nécropsies ont été effectuées à 6, 18, 24 et 48 heures après l'exposition.

- données acquises par Heinloth et al.(2004), normalisées par Bushel et al. (2007)


- data_t : 1 variable qualitative et 3 quantitatives
```{r echo=FALSE}
data_t = liver.toxicity$treatment 
str(data_t)

# check des NA sur les traitement 
nbre_NA = toString(as.numeric(sum(is.na(data_t))))
cat("Nombre de NA:", nbre_NA)

```


## Variables à expliquer:

L'ARNm du foie a été extrait. Les données ont été normalisées et prétraitées par Bushel et al. (2007).

- data_g : expression de 3116 gènes (ARNm du foie) --> 3116 variables quantitatives

```{r importation ded données d expression des gènes, echo=FALSE}
# importation des données
data_g = liver.toxicity$gene

# check de dimensions
nbre_rows = toString(nrow(data_g))
nbre_cols = toString(ncol(data_g))

# check des NA sur les genes
nbre_NA = toString(as.numeric(sum(is.na(data_g))))

# Affichage des 2 résultats précédents 
print(glue("Dimensions: ({nbre_rows}, {nbre_cols})\n Nombre de NA: {nbre_NA}"))

# Affichage du nombre de variables selon chaque type
table(unlist(lapply(data_g, class)))
# data_types(data_g)  # si on veut afficher l'histogramme associé
```


- data_gID : id des gènes aussi disponibles mais avec beaucoup de données manquantes
```{r ID gènes, echo=FALSE}
# A consulter éventuellement à la fin de l'analyse pour l'interprétation
data_gID = liver.toxicity$gene.ID   # Rq. bcp de données manquantes
```


## Variables à expliquer:

Dix mesures clinique chimiques de variables contenant des marqueurs de lésions hépatiques sont disponibles pour chaque sujet et les niveaux d'enzymes sériques sont mesurés numériquement.
- data_c  --> 10 variables quantitatives
```{r echo=FALSE}
data_c = liver.toxicity$clinic 
str(data_c)

# check des NA
nbre_NA = toString(as.numeric(sum(is.na(data_c))))
cat("Nombre de NA:", nbre_NA)
```



# Analyse descriptive


```{r concaténation donnée cliniques et de traitement, echo=FALSE}
donnees_tc = cbind.data.frame(data_t,data_c)
# acp
res_pca<-PCA(donnees_tc[, -c(1)], graph=T, quali.sup = 1)  # quali.sup = 1
# Valeur propre
fviz_eig(res_pca, addlabels = TRUE, ylim = c(0, 50))

# axe 1+2
fviz_ellipses(res_pca,axes=c(1,2), habillage="Treatment.Group")
#fviz_ellipses(res_pca,axes=c(1,2), habillage="Dose.Group")
#fviz_ellipses(res_pca,axes=c(1,2), habillage="Time.Group")
# correlation et heatmap}
correlation = cor(data_c)
kable(correlation, digits = 2)
#corrplot(correlation,method = "color",type = 'upper', order="hclust")
corrplot(correlation,type = 'upper', order="hclust")
#corrplot(correlation,type = 'upper')
```




## Analyse descriptive heatmap entre données cliniques

```{r heatmap correlations entre les données cliniques (version 1), echo=FALSE}
# correlation = cor(data_c)   # est-ce qu'on doit normaliser les colonnes avant de faire le calcul de corrélation? (je ne pense pas, mais je ne suis pas sûre )

# 1ère visualisation possible
#heatmap(abs(correlation),symm=T,Colv = NA)              # obligé de prendre abs? 
# # scale = "row" by default
```

```{r heatmap correlations entre les données cliniques (version 2), echo=FALSE}
#install.packages("pheatmap") # p for pretty
library("pheatmap")

correlation = cor(data_c)

# 2ème visualisation possible (je ne sais pas pourquoi ne s'affiche plus dans Rpres)
pheatmap(abs(correlation),    
         cutree_cols = 2,   # couper en 2 clusters
         cluster_rows = F, 
         main = "Corrélations des 10 indicateurs\n de lésions hépatiquesles (mesures cliniques) ") 
```

## Analyse descriptive heatmap sur données cliniques normalisées et k-means des rats


```{r heatmap correlations sur données cliniques entre les rats, echo=FALSE, fig.dim=c(16, 13)}

#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")

library(ComplexHeatmap)
# NE S AFFICHE PLUS CORRECTEMENT SUR LE RPRES
# prendre la matrice des données qu'on veut (besoin pour heatmap)
# prendre la transposée (car j'ai trouvé ca plus pratique pour la visualisation des rats), mais on paut changer si vous n'etes pas d'accord
data_c_rats = t(as.matrix(scale(data_c))) # prendre scale(data_c) pour normaliser chaque indicateur clinique sur l'ensemble des rats


# créer la top annotation
ha = HeatmapAnnotation(Dose = data_t$Dose.Group,              # éventuellement à convertir en facteur (numérique pour le moment)
                       Time = data_t$Time.Group,              # éventuellement à convertir en facteur (numérique pour le moment)
                       simple_anno_size = unit(1, "cm")
)


Heatmap(data_c_rats,                                    # (s'affiche mal dans Rpres)
        cluster_rows = F,
        row_names_gp = gpar(fontsize = 20), 
        column_names_side = "top",
        column_names_gp = gpar(fontsize = 15),
        column_km = 3,
        column_gap = unit(2, "mm"),
        border = TRUE,
        top_annotation = ha,   #  k-means partitioning along the columns
        column_title = "Clustering (K-means) des rats selon leur profil clinique\n et comparaison au traitement recu", 
        column_title_gp = gpar(fontsize = 25, fontface = "bold")) 
```

## Analyse descriptive heatmap sur expression génétique différentielle et k-means des rats

```{r heatmap correlations sur expression génétique différentielle entre les rats, fig.dim = c(15, 8), echo=FALSE}
# meme code que chunk précédent, mais appliqué à data_g et enlever l'affichage des lignes
data_g_rats = t(as.matrix(scale(data_g))) # prendre scale(data_c) pour normaliser chaque indicateur clinique sur l'ensemble des rats


# créer la top annotation
ha = HeatmapAnnotation(
    Dose = data_t$Dose.Group,              # éventuellement à convertir en facteur (numérique pour le moment)
    Time = data_t$Time.Group,              # éventuellement à convertir en facteur (numérique pour le moment)
    simple_anno_size = unit(1, "cm")
)


Heatmap(data_g_rats,                                    
        cluster_rows = F,
        row_names_gp = gpar(fontsize = 0),   # j'essaye de na pas afficher le nom des raws
        column_names_side = "top",
        column_names_gp = gpar(fontsize = 12),
        column_km = 3,
        column_gap = unit(2, "mm"),
        border = TRUE,
        top_annotation = ha,   #  k-means partitioning along the columns
        column_title = "Clustering (K-means) des rats selon leur expression génétique différentielle\n et comparaison au traitement recu", 
        column_title_gp = gpar(fontsize = 15, fontface = "bold")) 
```

heatMap sur les gènes 

```{r}
#heatmap(abs(cor(data_g)), symm = TRUE)
```


# Montrer que les données suivent une loi gaussienne. 

```{r}
library(ggplot2)
# Histogramme basique

# p value en fonction numero du gène (ou juste de 1 à 3116)
# tracer une ligne à 0,05. 
# H0 : Pas gaussien 
# H1 : gaussien 
# On veut que > 0.05 --> On rejette H0 



# liste des pvaleur pour chaque gene avec le test de Shapiro
list_pvalue = c()
list_gene = c()
for (i in 1:dim(data_g)[2]){
  list_pvalue <- c(list_pvalue, shapiro.test(data_g[,i])$p.value)
  list_gene <- c(list_gene,i)
}

# Visualiser sous al forme d'un plot pour voir la répartition des pvalue en fonction des gènes

list_pvalue_df <-  data.frame(list_gene,list_pvalue) # pour utiliser ggplot2, il nous faut des df

library(ggplot2)

p1 <- ggplot(list_pvalue_df) + # Données
  aes(x = list_gene, y = list_pvalue) + # Variables à représenter (esthétiques)
  geom_point() + # Représentation
  geom_hline(yintercept = 0.05, color = "red", linetype = "dashed")

# Visualiser sous la forme d'un histogramme pour avoir le nombre de variables gaussiennes 

p2 <- ggplot(list_pvalue_df) + # Données
  aes(x = list_pvalue) + # Variables à représenter (esthétiques)
  geom_histogram(binwidth=0.05,fill = "grey", col = "black") + # Représentation
  geom_vline(xintercept = 0.05, color = "red", linetype = "dashed")

cowplot::plot_grid(p1, p2) # pour avoir 2 courbes qui se génèrent en même temps 

```

```{r}
# récuperer maintenant la liste des gènes qui ont une pvalue > 0.05 et leur pvalue 
pvalue_sup_0.05 <- list_pvalue_df[list_pvalue_df$list_pvalue>=0.63,]

# recuperer uniquement les gènes dans data_g tel que leurs pvalue soit >0.05
data_g_0.05 <- data_g[,pvalue_sup_0.05$list_gene]
```


# Régression linéaire généralisé 

64 individus (rats)
data_c : données cliniques (10 variables)
data_g : données génétiques (3116 variables)
Xd : Dose ingéré de médicaments
Xt : Temps d'execution après ingestion du médeciments 


On explique Y (data_c + data_g) en fonction de Xd + Xt : que des O pour le whitening tests 
On explique Y (data_c + data_g) en fonction de Xtr : que des O pour le whitening tests 
On explique Y (data_g) en fonction de Xd + Xt : que des O pour le whitening tests 
On explique Y (data_g) en fonction de Xtr : que des O pour le whitening tests 
Que faire ?


# Construction de données à tester : Y (data_c + data_g)
```{r notre Y, données génétiques + les 10 mesures cliniques}
Y = cbind(data_c, data_g)
# et le scaler
# notre but est de voir lesquels s'allument/s'éteignent en fonction des différents traitement testés
Yscaled=scale(Y)
Y=Yscaled  # à vérifier que je n'ai pas aussi scalé avant lors de mon travail sur heatmaps
```

```{r }
Xd = data_t[,3]  # Dose 
Xd = as.factor(Xd)

Xt = data_t[,4]  # Time
Xt = as.factor(Xt)

Xtr = data_t[,2]  # Traitement

table(Xd, Xt)
```

# matrice de design
```{r}
#X = model.matrix(lm(Y~ Xd + Xt -1))
X = model.matrix(lm(Y~ Xtr + 0 ))

p <- ncol(X)
p #on obtient 16 
n=nrow(X)
n  #64
q= dim(Y)[2]
q # 3126 variables
```


# Prendre les residus (E_hat)
```{r}
residuals=lm(as.matrix(Y)~X-1)$residuals 
#residuals
```

# Faire le test de whitening_test sur les résidus pour savoir si on a besoin de blanchir les données ou pas

Récupérer les résidus et regarder si il y a des dépendances entre les colonnes des individus. On fait cela avec un whitening test 

```{r}
# H0 : les Ei sont indépendants
# H1 : les Ei ne sont pas indépendants

pvalue=whitening_test(residuals)
pvalue
# < 0.05 donc on ne peut pas rejetter H0, alors on ne pas peut rejeter la non independance entre les Ei
# d'où on doit blanchir les données
```

# Choix de la méthode de blanchiement avec la fonction whitening_choice
```{r}
result=whitening_choice(residuals,c("AR1","nonparam","ARMA"),pAR=1,qMA=1)
result
```

# Essayer de réduire la taille des données Y en prenant que les gènes à valeurs gaussienne


# Construction de données à tester : Y = data_g_0.05
```{r notre Y, données génétiques + les 10 mesures cliniques}
Y = data_g_0.05
# et le scaler
# notre but est de voir lesquels s'allument/s'éteignent en fonction des différents traitement testés
Yscaled=scale(Y)
Y=Yscaled  # à vérifier que je n'ai pas aussi scalé avant lors de mon travail sur heatmaps
```

```{r }
Xd = data_t[,3]  # Dose 
Xd = as.factor(Xd)

Xt = data_t[,4]  # Time
Xt = as.factor(Xt)

Xtr = data_t[,2]  # Traitement

table(Xd, Xt)
```

# matrice de design
```{r}
#X = model.matrix(lm(Y~ Xd + Xt -1))
X = model.matrix(lm(Y~ Xtr + 0 ))

p <- ncol(X)
p #on obtient 16 
n=nrow(X)
n  #64
q= dim(Y)[2]
q # 1691 variables
```


# Prendre les residus (E_hat)
```{r}
residuals=lm(as.matrix(Y)~X-1)$residuals 
#residuals
```

# Faire le test de whitening_test sur les résidus pour savoir si on a besoin de blanchir les données ou pas

Récupérer les résidus et regarder si il y a des dépendances entre les colonnes des individus. On fait cela avec un whitening test 

```{r}
# H0 : les Ei sont indépendants
# H1 : les Ei ne sont pas indépendants

pvalue=whitening_test(residuals)
pvalue
# < 0.05 donc on ne peut pas rejetter H0, alors on ne pas peut rejeter la non independance entre les Ei
# d'où on doit blanchir les données
```

# Choix de la méthode de blanchiement avec la fonction whitening_choice
```{r}
result=whitening_choice(residuals,c("AR1","nonparam","ARMA"),pAR=1,qMA=1)
result
```





